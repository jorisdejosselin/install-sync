name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > release_notes.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "First release of install-sync" >> release_notes.md
          fi
          
          # Add installation instructions
          cat >> release_notes.md << 'EOF'
          
          ## Installation
          
          ### Download Binary
          Download the appropriate binary for your platform from the assets below:
          - **Linux**: `install-sync-ubuntu-latest`
          - **Windows**: `install-sync-windows-latest.exe`
          - **macOS**: `install-sync-macos-latest`
          
          Make the binary executable and place it in your PATH.
          
          ### Install via pip
          ```bash
          pip install install-sync
          ```
          
          ### Install via Poetry
          ```bash
          poetry add install-sync
          ```
          
          ## Usage
          
          ```bash
          # Set up repository
          install-sync repo setup
          
          # Install packages
          install-sync install git
          install-sync install python3
          
          # List packages
          install-sync list
          
          # Show info
          install-sync info
          ```
          EOF
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  build-and-upload:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: install-sync-linux
            asset_name: install-sync-linux
          - os: windows-latest
            artifact_name: install-sync-windows.exe
            asset_name: install-sync-windows.exe
          - os: macos-latest
            artifact_name: install-sync-macos
            asset_name: install-sync-macos
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Build executable
        run: |
          if python -c "import sys; exit(0 if sys.version_info >= (3, 13) else 1)"; then
            poetry install --with build
            poetry run nuitka --onefile \
              --output-filename=${{ matrix.artifact_name }} \
              --include-package=install_sync \
              install_sync/main.py
          else
            poetry install --with build
            poetry run pyinstaller --onefile \
              --name ${{ matrix.artifact_name }} \
              --add-data "install_sync:install_sync" \
              install_sync/main.py
          fi
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream