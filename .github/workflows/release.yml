name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.8.3

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Semantic Release
        id: semantic
        uses: python-semantic-release/python-semantic-release@v9.1.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          root_options: --verbose

  build:
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            platform: linux
          - os: windows-latest
            arch: amd64
            platform: windows
          - os: macos-13
            arch: amd64
            platform: darwin
          - os: macos-latest
            arch: arm64
            platform: darwin

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.8.3

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Set binary name
        id: binary-name
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            echo "name=install-sync-${{ matrix.platform }}-${{ matrix.arch }}.exe" >> $GITHUB_OUTPUT
            echo "artifact=install-sync-${{ matrix.platform }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT
          else
            echo "name=install-sync-${{ matrix.platform }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT
            echo "artifact=install-sync-${{ matrix.platform }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build executable
        run: |
          poetry install --with build
          if python -c "import sys; exit(0 if sys.version_info >= (3, 13) else 1)"; then
            # Use Nuitka for Python 3.13+
            poetry run nuitka --onefile \
              --output-filename=${{ steps.binary-name.outputs.name }} \
              --include-package=install_sync \
              cli_entry.py
          else
            # Use PyInstaller for Python < 3.13
            if [ "${{ runner.os }}" = "Windows" ]; then
              poetry run pyinstaller --onefile \
                --name ${{ steps.binary-name.outputs.name }} \
                --add-data "install_sync;install_sync" \
                --hidden-import install_sync \
                --hidden-import install_sync.main \
                --hidden-import install_sync.config_utils \
                --hidden-import install_sync.models \
                --hidden-import install_sync.git_manager \
                --hidden-import install_sync.package_managers \
                --hidden-import install_sync.repo_manager \
                --hidden-import ipaddress \
                --hidden-import pathlib \
                --hidden-import urllib \
                --hidden-import urllib.parse \
                --collect-all typer \
                --collect-all rich \
                --collect-all pydantic \
                cli_entry.py
            else
              poetry run pyinstaller --onefile \
                --name ${{ steps.binary-name.outputs.name }} \
                --add-data "install_sync:install_sync" \
                --hidden-import install_sync \
                --hidden-import install_sync.main \
                --hidden-import install_sync.config_utils \
                --hidden-import install_sync.models \
                --hidden-import install_sync.git_manager \
                --hidden-import install_sync.package_managers \
                --hidden-import install_sync.repo_manager \
                --hidden-import ipaddress \
                --hidden-import pathlib \
                --hidden-import urllib \
                --hidden-import urllib.parse \
                --collect-all typer \
                --collect-all rich \
                --collect-all pydantic \
                cli_entry.py
            fi
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.binary-name.outputs.artifact }}
          path: dist/${{ steps.binary-name.outputs.name }}*

  upload-assets:
    needs: [release, build]
    runs-on: ubuntu-latest
    if: needs.release.outputs.new-release-published == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Display structure of downloaded files
        run: ls -la dist/

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/install-sync-linux-amd64/install-sync-linux-amd64
            dist/install-sync-windows-amd64/install-sync-windows-amd64.exe
            dist/install-sync-darwin-amd64/install-sync-darwin-amd64
            dist/install-sync-darwin-arm64/install-sync-darwin-arm64
          body: |
            ## Installation

            ### Download Binary
            Download the appropriate binary for your platform from the assets below:
            - **Linux (x64)**: `install-sync-linux-amd64`
            - **Windows (x64)**: `install-sync-windows-amd64.exe`
            - **macOS (Intel x64)**: `install-sync-darwin-amd64`
            - **macOS (Apple Silicon ARM64)**: `install-sync-darwin-arm64`

            Make the binary executable and place it in your PATH.

            ### Quick Install Script
            ```bash
            # Linux/macOS
            curl -sSL https://raw.githubusercontent.com/joris/install-sync/main/install.sh | bash

            # Windows (PowerShell)
            iwr -useb https://raw.githubusercontent.com/joris/install-sync/main/install.ps1 | iex
            ```

            ### From Source
            ```bash
            git clone https://github.com/joris/install-sync.git
            cd install-sync
            poetry install
            poetry run install-sync --help
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.outputs.new-release-published == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.8.3

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        run: poetry publish --username __token__ --password ${{ secrets.PYPI_TOKEN }}
